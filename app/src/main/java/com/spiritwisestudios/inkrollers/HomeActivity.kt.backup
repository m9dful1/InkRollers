package com.spiritwisestudios.inkrollers

import android.content.Intent
import android.os.Build
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.util.Log
import android.view.View
import android.view.WindowManager
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import com.google.firebase.BuildConfig
import com.spiritwisestudios.inkrollers.ui.ProfileFragment
import com.google.firebase.auth.ktx.auth
import com.google.firebase.ktx.Firebase
import com.spiritwisestudios.inkrollers.repository.ProfileRepository
import com.google.firebase.FirebaseApp
import com.google.firebase.appcheck.FirebaseAppCheck
import com.google.firebase.appcheck.playintegrity.PlayIntegrityAppCheckProviderFactory
import com.google.firebase.appcheck.debug.DebugAppCheckProviderFactory
import com.spiritwisestudios.inkrollers.databinding.ActivityHomeBinding
import android.widget.Button
import android.widget.ImageButton
import android.widget.LinearLayout
import com.spiritwisestudios.inkrollers.util.EspressoIdlingResource
import androidx.core.view.WindowCompat
import androidx.core.view.WindowInsetsCompat
import androidx.core.view.WindowInsetsControllerCompat
import androidx.activity.OnBackPressedCallback

/**
 * Main entry point for the Ink Rollers game application.
 * 
 * Provides the home screen interface for hosting new games, joining existing games,
 * and accessing player profiles. Handles game setup configuration including time limits,
 * maze complexity, game modes, and match privacy settings.
 */
class HomeActivity : AppCompatActivity() {

    private lateinit var binding: ActivityHomeBinding
    private lateinit var audioManager: com.spiritwisestudios.inkrollers.AudioManager

    companion object {
        const val EXTRA_MODE = "com.spiritwisestudios.inkrollers.MODE"
        const val EXTRA_GAME_ID = "com.spiritwisestudios.inkrollers.GAME_ID"
        const val EXTRA_TIME_LIMIT_MINUTES = "com.spiritwisestudios.inkrollers.TIME_LIMIT_MINUTES"
        const val EXTRA_MAZE_COMPLEXITY = "com.spiritwisestudios.inkrollers.MAZE_COMPLEXITY"
        const val EXTRA_GAME_MODE = "com.spiritwisestudios.inkrollers.GAME_MODE"
        const val EXTRA_IS_PRIVATE_MATCH = "com.spiritwisestudios.inkrollers.EXTRA_IS_PRIVATE_MATCH"
        const val MODE_HOST = "HOST"
        const val MODE_JOIN = "JOIN"

        const val COMPLEXITY_LOW = "LOW"
        const val COMPLEXITY_MEDIUM = "MEDIUM"
        const val COMPLEXITY_HIGH = "HIGH"
        
        const val GAME_MODE_COVERAGE = "COVERAGE"
        const val GAME_MODE_ZONES = "ZONES"
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityHomeBinding.inflate(layoutInflater)
        setContentView(binding.root)

        // Modern fullscreen approach
        WindowCompat.setDecorFitsSystemWindows(window, false)
        val controller = WindowInsetsControllerCompat(window, binding.root)
        controller.hide(WindowInsetsCompat.Type.systemBars())
        controller.systemBarsBehavior = WindowInsetsControllerCompat.BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE

        // Handle display cutout
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
            window.attributes.layoutInDisplayCutoutMode = WindowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES
        }

        // Deprecated fallback for maximum compatibility
        @Suppress("DEPRECATION")
        window.decorView.systemUiVisibility = (View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY
                or View.SYSTEM_UI_FLAG_LAYOUT_STABLE
                or View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                or View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
                or View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
                or View.SYSTEM_UI_FLAG_FULLSCREEN)

        audioManager = com.spiritwisestudios.inkrollers.AudioManager.getInstance(this)
        audioManager.initialize()

        // initializeFirebaseAppCheck() // TEMPORARILY DISABLED FOR TESTING
        setupUIClickListeners()

        onBackPressedDispatcher.addCallback(this, backPressedCallback)
    }

    /** Configures Firebase App Check for enhanced security based on build type. */
    private fun // initializeFirebaseAppCheck() // TEMPORARILY DISABLED FOR TESTING {
        try {
            FirebaseApp.initializeApp(this)
            val firebaseAppCheck = FirebaseAppCheck.getInstance()
            
            if (BuildConfig.DEBUG) {
                Log.d("HomeActivity", "Initializing Firebase App Check with Debug provider")
                firebaseAppCheck.installAppCheckProviderFactory(
                    DebugAppCheckProviderFactory.getInstance()
                )
                Log.d("HomeActivity", "Debug App Check provider installed")
            } else {
                Log.d("HomeActivity", "Initializing Firebase App Check with Play Integrity provider")
                firebaseAppCheck.installAppCheckProviderFactory(
                    PlayIntegrityAppCheckProviderFactory.getInstance()
                )
                Log.d("HomeActivity", "Play Integrity App Check provider installed")
            }
            
            // Test App Check token generation
            firebaseAppCheck.getAppCheckToken(false)
                .addOnSuccessListener { appCheckTokenResponse ->
                    Log.d("HomeActivity", "App Check token generated successfully")
                }
                .addOnFailureListener { exception ->
                    Log.e("HomeActivity", "App Check token generation failed", exception)
                    Toast.makeText(this, "App Check setup failed: ${exception.message}", Toast.LENGTH_LONG).show()
                }
                
        } catch (e: Exception) {
            Log.e("HomeActivity", "Firebase App Check initialization failed", e)
            Toast.makeText(this, "Firebase initialization failed: ${e.message}", Toast.LENGTH_LONG).show()
        }
    }

    /** Sets up click listeners for all UI buttons with appropriate animations and actions. */
    private fun setupUIClickListeners() {
        binding.buttonPlay.setOnClickListener {
            audioManager.playSound(com.spiritwisestudios.inkrollers.AudioManager.SoundType.UI_CLICK)
            val animation = android.view.animation.AnimationUtils.loadAnimation(this, R.anim.button_press)
            binding.buttonPlay.startAnimation(animation)
            
            Handler(Looper.getMainLooper()).postDelayed({
                binding.layoutSubmenu.visibility = View.VISIBLE
            }, 100)
        }

        binding.buttonHostGame.setOnClickListener {
            audioManager.playSound(com.spiritwisestudios.inkrollers.AudioManager.SoundType.UI_CLICK)
            showMatchSettingsDialog()
        }

        binding.buttonJoinGame.setOnClickListener {
            audioManager.playSound(com.spiritwisestudios.inkrollers.AudioManager.SoundType.UI_CLICK)
            val gameId = binding.editTextGameId.text.toString().trim()
            if (gameId.isEmpty()) {
                startGameActivity(MODE_JOIN, null)
            } else if (gameId.length == 6) {
                startGameActivity(MODE_JOIN, gameId)
            } else {
                Toast.makeText(this, "Please enter a valid 6-character Game ID or leave blank to join random game", Toast.LENGTH_SHORT).show()
            }
        }

        binding.buttonProfile.setOnClickListener {
            audioManager.playSound(com.spiritwisestudios.inkrollers.AudioManager.SoundType.UI_CLICK)
            val currentUser = Firebase.auth.currentUser
            if (currentUser != null) {
                showProfileFragment(currentUser.uid)
            } else {
                signInAndShowProfile()
            }
        }

        val settingsButton = findViewById<ImageButton>(R.id.button_settings)
        settingsButton.setOnClickListener {
            SettingsFragment().show(supportFragmentManager, "SettingsDialog")
        }
    }

    /** Displays the profile fragment for the specified user. */
    private fun showProfileFragment(uid: String) {
        supportFragmentManager.beginTransaction()
            .replace(android.R.id.content, ProfileFragment.newInstance(uid))
            .addToBackStack(null)
            .commit()
    }

    /** Performs anonymous sign-in and then displays the profile fragment. */
    private fun signInAndShowProfile() {
        EspressoIdlingResource.increment() // Signal that a long-running task has started
        Firebase.auth.signInAnonymously()
            .addOnCompleteListener(this) { task ->
                if (task.isSuccessful) {
                    val user = Firebase.auth.currentUser
                    user?.uid?.let {
                        Log.d("HomeActivity", "Anonymous sign-in successful for profile view. UID: $it")
                        showProfileFragment(it)
                    } ?: run {
                        Log.e("HomeActivity", "Anonymous sign-in task successful but user or UID is null.")
                        Toast.makeText(baseContext, "Error: Could not retrieve user ID after sign-in.", Toast.LENGTH_SHORT).show()
                    }
                } else {
                    Log.w("HomeActivity", "Anonymous sign-in failed for profile view.", task.exception)
                    Toast.makeText(baseContext, "Sign-in failed. Cannot view profile.", Toast.LENGTH_SHORT).show()
                }
                EspressoIdlingResource.decrement() // Signal that the task is complete
            }
    }

    /** Initiates the match settings configuration flow for hosting a new game. */
    private fun showMatchSettingsDialog() {
        val timeOptions = arrayOf("3 minutes", "5 minutes", "7 minutes")
        val timeValues = intArrayOf(3, 5, 7)
        var selectedTimeLimit = timeValues[0]

        AlertDialog.Builder(this)
            .setTitle("Set Time Limit")
            .setItems(timeOptions) { _, which ->
                selectedTimeLimit = timeValues[which]
                showComplexityDialog(selectedTimeLimit)
            }
            .setNegativeButton("Cancel", null)
            .show()
    }

    /** Displays maze complexity selection dialog. */
    private fun showComplexityDialog(timeLimit: Int) {
        val complexityOptions = arrayOf("Low", "Medium", "High")
        val complexityValues = arrayOf(COMPLEXITY_LOW, COMPLEXITY_MEDIUM, COMPLEXITY_HIGH)
        var selectedComplexity = complexityValues[2]

        AlertDialog.Builder(this)
            .setTitle("Set Maze Complexity")
            .setItems(complexityOptions) { _, which ->
                selectedComplexity = complexityValues[which]
                showGameModeDialog(timeLimit, selectedComplexity)
            }
            .setNegativeButton("Cancel", null)
            .show()
    }

    /** Displays game mode selection dialog (Coverage vs Zones). */
    private fun showGameModeDialog(timeLimit: Int, complexity: String) {
        val gameModeOptions = arrayOf("Coverage", "Zones")
        val gameModeValues = arrayOf(GAME_MODE_COVERAGE, GAME_MODE_ZONES)
        var selectedGameMode = gameModeValues[0]

        AlertDialog.Builder(this)
            .setTitle("Select Game Mode")
            .setItems(gameModeOptions) { _, which ->
                selectedGameMode = gameModeValues[which]
                showMatchTypeDialog(timeLimit, complexity, selectedGameMode)
            }
            .setNegativeButton("Cancel", null)
            .show()
    }
    
    /** Displays match privacy selection dialog (Public vs Private). */
    private fun showMatchTypeDialog(timeLimit: Int, complexity: String, gameMode: String) {
        val matchTypeOptions = arrayOf("Public (Joinable by random)", "Private (Requires Game ID)")
        var isPrivate = false

        AlertDialog.Builder(this)
            .setTitle("Select Match Type")
            .setSingleChoiceItems(matchTypeOptions, 0) { _, which ->
                isPrivate = (which == 1)
            }
            .setPositiveButton("Host Game") { _, _ ->
                startGameActivity(MODE_HOST, null, timeLimit, complexity, gameMode, isPrivate)
            }
            .setNegativeButton("Cancel", null)
            .show()
    }

    /** Launches MainActivity with the specified game configuration. */
    fun startGameActivity(mode: String, gameId: String? = null, timeLimit: Int = 3, complexity: String = COMPLEXITY_HIGH, gameMode: String = GAME_MODE_COVERAGE, isPrivate: Boolean = false) {
        android.util.Log.d("HomeActivity", "Starting MainActivity with mode: $mode, gameId: $gameId, timeLimit: $timeLimit, mazeComplexity: $complexity, gameMode: $gameMode, isPrivate: $isPrivate")
        val intent = Intent(this, MainActivity::class.java).apply {
            putExtra(EXTRA_MODE, mode)
            if (mode == MODE_JOIN && gameId != null) {
                putExtra(EXTRA_GAME_ID, gameId)
            }
            if (mode == MODE_HOST) {
                putExtra(EXTRA_TIME_LIMIT_MINUTES, timeLimit)
                putExtra(EXTRA_MAZE_COMPLEXITY, complexity)
                putExtra(EXTRA_GAME_MODE, gameMode)
                putExtra(EXTRA_IS_PRIVATE_MATCH, isPrivate)
            }
        }
        startActivity(intent)
    }

    private val backPressedCallback = object : OnBackPressedCallback(true) {
        override fun handleOnBackPressed() {
            if (binding.layoutSubmenu.visibility == View.VISIBLE) {
                binding.layoutSubmenu.visibility = View.GONE
                binding.buttonPlay.visibility = View.VISIBLE
            } else {
                // If the custom logic doesn't apply, we disable the callback
                // and let the default back button behavior execute.
                isEnabled = false
                onBackPressedDispatcher.onBackPressed()
            }
        }
    }

    override fun onPause() {
        super.onPause()
        audioManager.pauseAudio()
    }

    override fun onResume() {
        super.onResume()
        audioManager.resumeAudio()
        // REMOVE: Set user online when activity resumes
        // Firebase.auth.currentUser?.uid?.let {
        // ProfileRepository.setUserOnlineStatus(it)
        // }
    }
} 